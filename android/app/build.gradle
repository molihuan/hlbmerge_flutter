plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
    alias(libs.plugins.hilt)
    alias(libs.plugins.kotlin.serialization)
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

//读取本地签名配置
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader("UTF-8") { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    namespace = "com.molihuan.hlbmerge"
//    compileSdk = flutter.compileSdkVersion
//    ndkVersion = flutter.ndkVersion
    compileSdk = 36
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

//构建添加指定kotlin版本
    kotlinOptions {
        jvmTarget = '17'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.molihuan.hlbmerge"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
//        minSdk = flutter.minSdkVersion
//        targetSdk = flutter.targetSdkVersion
        minSdk = 24
        targetSdk = 36
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled true
    }


    android.applicationVariants.all { variant ->
        // 我们只对 release 版本的构建进行重命名
        if (variant.name == 'release') {
            variant.outputs.all { output ->
                // 获取版本号 (例如：1.0.0)
                def versionName = variant.versionName

                // 获取软件名 (可以硬编码，或从其他地方动态获取)
                // rootProject.name 会获取 Flutter 项目的根目录名，是一个不错的选择
                def appName = "HLB站缓存合并"

                // 获取架构 (ABI) 名称
                def abi = output.getFilter(com.android.build.OutputFile.ABI)

                // 组合成新的文件名
                // 如果 abi 为 null (例如在构建通用包时)，则不添加架构部分
                def newApkName
                if (abi != null) {
                    newApkName = "${appName}_${abi}_${versionName}.apk"
                } else {
                    newApkName = "${appName}_universal_${versionName}.apk"
                }

                // 应用新的文件名
                outputFileName = newApkName
            }
        }
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
//            signingConfig = signingConfigs.debug
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig = signingConfigs.debug
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        compose true
        buildConfig true
        aidl true
    }
}

flutter {
    source = "../.."
}

dependencies {
    // composeBom
    def composeBom = platform(libs.androidx.compose.bom)
    implementation(composeBom)
    testImplementation(composeBom)
    androidTestImplementation(composeBom)
    // 通用模块
    implementation(project(":CommonModule"))

    // Hilt
    implementation(libs.hilt.android)
    implementation(libs.androidx.hilt.navigation.compose)
    ksp(libs.hilt.compiler)

    // Kotlin 反射库
    implementation(libs.kotlin.reflect)
    // 序列化
    implementation(libs.kotlinx.serialization.json)

    // 图片加载
    implementation(libs.coil.compose)
    implementation(libs.coil.network.okhttp)
    // 日志
    implementation(libs.timber)


    // 设备兼容框架：https://github.com/getActivity/DeviceCompat
    implementation libs.devicecompat
    // 权限请求框架：https://github.com/getActivity/XXPermissions
    implementation libs.xxpermissions

    //图标库 https://mvnrepository.com/artifact/androidx.compose.material/material-icons-extended
    implementation("androidx.compose.material:material-icons-extended:1.7.8")

    // https://mvnrepository.com/artifact/androidx.documentfile/documentfile
    implementation(libs.androidx.documentfile)
    //shizuku
    implementation(libs.shizuku.api)
    implementation(libs.shizuku.provider)

    //基础UI
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)

    // compose约束布局
    implementation(libs.androidx.constraintlayout.compose)
    // https://mvnrepository.com/artifact/androidx.navigation/navigation-compose
    implementation(libs.androidx.navigation.compose)

    //测试相关
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)

}